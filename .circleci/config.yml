# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  slack: circleci/slack@3.4.2
  pr-tools: mojaloop/pr-tools@0.1.10
  github-release: h-matsuo/github-release@0.1.3

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    shell: "/bin/sh -leo pipefail" # Ref: https://circleci.com/docs/env-vars/#alpine-linux
    docker:
      - image: node:lts-alpine  # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine

  default-machine:
    shell: "/bin/bash -leo pipefail"
    machine:
      image: ubuntu-2204:2023.04.2 # Ref: https://circleci.com/developer/machine/image/ubuntu-2204

defaults_working_directory: &defaults_working_directory
  working_directory: /home/circleci/project

defaults_docker_Dependencies: &defaults_docker_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk --no-cache add -t build-dependencies make gcc g++ python3 libtool autoconf automake
    apk --no-cache add bash
    npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python3 \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

defaults_npm_auth: &defaults_npm_auth
  name: Update NPM registry auth token
  command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc

defaults_npm_publish_version: &defaults_npm_publish
  name: Update version to prerelease
  command: |
    source $BASH_ENV
    echo "Publishing tag $CIRCLE_TAG"
    npm publish --tag $CIRCLE_TAG --access public

defaults_npm_publish_release: &defaults_npm_publish_release
  name: Publish NPM $RELEASE_TAG artifact
  command: |
    source $BASH_ENV
    echo "Publishing tag $RELEASE_TAG"
    npm publish --tag $RELEASE_TAG --access public

defaults_slack_announcement: &defaults_slack_announcement
  name: Slack announcement for tag releases
  command: |
    curl -X POST \
      $SLACK_WEBHOOK_ANNOUNCEMENT \
      -H 'Content-type: application/json' \
      -H 'cache-control: no-cache' \
      -d "{
      \"text\": \"*${CIRCLE_PROJECT_REPONAME}* - Release \`${CIRCLE_TAG}\`: https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/${CIRCLE_TAG}\"
    }"

defaults_display_versions: &defaults_display_versions
  name: Display Versions
  command: |
    echo "What is the active version of Nodejs?"
    echo "node: $(node --version)"
    echo "yarn: $(yarn --version)"
    echo "npm: $(npm --version)"

jobs:
  setup:
    <<: *defaults_working_directory
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      - checkout
      - run:
          <<: *defaults_display_versions
      - run:
          name: Update NPM install
          command: npm install
      - save_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - node_modules

  test-unit:
    <<: *defaults_working_directory
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      - checkout
      - run:
          <<: *defaults_display_versions
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install tape, tapes and tap-xunit
          command: npm install tape tapes tap-xunit
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute unit tests
          command: npm -s run test:xunit > ./test/results/tape.xml
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-coverage:
    <<: *defaults_working_directory
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - checkout
      - run:
          <<: *defaults_display_versions
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Execute code coverage check
          command: npm -s run test:coverage-check
      - store_artifacts:
          path: coverage
          prefix: test
      - store_test_results:
          path: coverage/lcov.info
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."
                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/$CIRCLE_PROJECT_REPONAME/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
            fi

  vulnerability-check:
    <<: *defaults_working_directory
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      - checkout
      - run:
          <<: *defaults_display_versions
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check --silent -- --json > ./audit/results/auditResults.json
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    <<: *defaults_working_directory
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      - run:
          <<: *defaults_license_scanner
      - checkout
      - run:
          <<: *defaults_display_versions
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  publish-snapshot:
    <<: *defaults_working_directory
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      - checkout
      - run:
          name: setup environment vars for SNAPSHOT release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT' >> $BASH_ENV
      - run:
          <<: *defaults_npm_auth
      - run:
          <<: *defaults_npm_publish_release
      - run:
          <<: *defaults_slack_announcement

  publish:
    <<: *defaults_working_directory
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      - checkout
      - run:
          name: setup environment vars for LATEST release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
      - run:
          <<: *defaults_npm_auth
      - run:
          <<: *defaults_npm_publish_release
      - run:
          <<: *defaults_slack_announcement

  release:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      - checkout
      - restore_cache:
          keys:
          - dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Configure git
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git checkout ${CIRCLE_BRANCH}
      - run:
          name: Configure ssh
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Generate changelog and bump package version
          command: npm run release
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  github-release:
    executor: default-machine
    steps:
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - checkout
      - run:
          name: Fetch updated release branch
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          # Note: this is rather imperfect, but will do for now
          name: Format the changelog into the github release body and get release tag
          command: |
            git diff --no-indent-heuristic master~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
            echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
            echo 'export RELEASE_TAG=`cat package-lock.json | jq -r .version`' >> $BASH_ENV
      - run:
          name: check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - github-release/create:
          github-token-variable: ${GITHUB_TOKEN}
          tag: v${RELEASE_TAG}
          title: v${RELEASE_TAG} Release
          description: ${RELEASE_CHANGES}
          file-path: CHANGELOG.md
      - slack/status:
          webhook: "$SLACK_WEBHOOK_ANNOUNCEMENT"
          success_message: '*"${CIRCLE_PROJECT_REPONAME}"* - Release \`"v${RELEASE_TAG}"\` \nhttps://github.com/mojaloop/"${CIRCLE_PROJECT_REPONAME}"/releases/tag/"v${RELEASE_TAG}"'

workflows:
  version: 2
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-coverage:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      # New commits to master release automatically
      - release:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - setup
            - test-unit
            - test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            branches:
              only:
                - master
                - /release\/v.*/
      - github-release:
          context: org-global
          requires:
            - release
          filters:
            branches:
              only:
                - master
                - /release\/v.*/
      - publish:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - setup
            - test-unit
            - test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/
      - publish-snapshot:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - setup
            - test-unit
            - test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot+((\.[0-9]+)?)/
            branches:
              ignore:
                - /.*/
